# Do NOT edit this file unless you really know what you are doing
SET(CMAKE_COLOR_MAKEFILE ON)
cmake_minimum_required(VERSION 3.24)
cmake_policy(SET CMP0076 NEW)

if(TARGET cpp-utils-with-mpi OR TARGET cpp-utils-without-mpi)
	return()
endif()

# Set project name
project(cpp-utils VERSION 1.0 DESCRIPTION "Various C++ utilities" LANGUAGES C CXX) #C specified so MPI_C_<...> is found as well
message(STATUS "Configuring cpp-utils")

option(WITH_MPI  "Build with MPI support" ON)
option(WITH_GDAL "Build with GDAL support" ON)
option(WITH_CGAL "Build with CGAL support" ON)

include(cmake/Message-Functions.cmake)
if(PROJECT_IS_TOP_LEVEL)
	include(cmake/Typical-Compiler-Options.cmake)
endif()

reportvar(WITH_MPI)
reportvar(WITH_GDAL)
reportvar(WITH_CGAL)

# Find PkgConfig
find_package(PkgConfig QUIET)

# Configure MPI if opted for
if(${WITH_MPI})
	find_package(MPI QUIET)
	set(MPI_C_FOUND ${MPI_C_FOUND} PARENT_SCOPE)
	set(MPI_CXX_FOUND ${MPI_CXX_FOUND} PARENT_SCOPE)
endif()

# Configure GDAL if opted for
if(${WITH_GDAL})
	find_package(GDAL REQUIRED QUIET)
	set(GDAL_FOUND ${GDAL_FOUND} PARENT_SCOPE)
endif()

# Configure CGAL if opted for
if(${WITH_CGAL})
	if(MSVC)
		message(STATUS "\n\nCGAL is currently disabled on Windows with MSVC as it iss not compiling")
		#set(CGAL_DISABLE_GMP ON) #GMP is not necessary
		#find_package(CGAL REQUIRED QUIET)
	else()
		find_package(CGAL REQUIRED QUIET)
		set(CGAL_FOUND ${CGAL_FOUND} PARENT_SCOPE)
	endif()
endif()

set(sources ${sources}
	src/file_utils.cpp
	src/general_utils.cpp
	src/RamerDouglasPeucker.cpp
)

if(${WITH_GDAL} AND GDAL_FOUND)
	set(sources ${sources} src/gdal_utils.cpp)
	add_definitions(-DHAVE_GDAL)
endif()

if(${WITH_CGAL} AND CGAL_FOUND)
	set(sources ${sources} src/cgal_utils.cpp)
	add_definitions(-DHAVE_CGAL)
endif()

#############################

# Add the cpp-utils-with-mpi library
if(${WITH_MPI} AND MPI_C_FOUND)
	set(target cpp-utils-with-mpi)
	add_library(${target} STATIC ${sources} )
	#set_target_properties(${target} PROPERTIES POSITION_INDEPENDENT_CODE ON)
	target_include_directories(${target} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>")
	target_include_directories(${target} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/submodules/csv-parser/single_include>")
	if(${WITH_GDAL} AND GDAL_FOUND)
		target_compile_definitions(${target} PUBLIC -DHAVE_GDAL)
		#target_include_directories(${target} PUBLIC GDAL::GDAL)
		target_link_libraries(${target} PUBLIC GDAL::GDAL)
	endif()
	if(${WITH_CGAL} AND CGAL_FOUND)
		target_compile_definitions(${target} PUBLIC -DHAVE_CGAL)
		#target_include_directories(${target} PUBLIC CGAL::CGAL)
		target_link_libraries(${target} PUBLIC CGAL::CGAL)
	endif()
	target_compile_definitions(${target} PUBLIC _MPI_ENABLED OMPI_SKIP_MPICXX)
	target_link_libraries(${target} PUBLIC MPI::MPI_C)
	add_library(cpp-utils::with-mpi ALIAS cpp-utils-with-mpi)
	install(TARGETS ${target} EXCLUDE_FROM_ALL OPTIONAL)
endif()

# Add the cpp-utils-without-mpi library
set(target cpp-utils-without-mpi)
add_library(${target} STATIC ${sources} )
set_target_properties(${target} PROPERTIES LINKER_LANGUAGE CXX)
#set_target_properties(${target} PROPERTIES POSITION_INDEPENDENT_CODE ON)
target_include_directories(${target} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>")
target_include_directories(${target} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/submodules/csv-parser/single_include>")
if(${WITH_GDAL} AND GDAL_FOUND)
	target_compile_definitions(${target} PUBLIC -DHAVE_GDAL)
	#target_include_directories(${target} PUBLIC GDAL::GDAL)
	target_link_libraries(${target} PUBLIC GDAL::GDAL)
endif()
if(${WITH_CGAL} AND CGAL_FOUND)
	target_compile_definitions(${target} PUBLIC -DHAVE_CGAL)
	#target_include_directories(${target} PUBLIC CGAL::CGAL)
	target_link_libraries(${target} PUBLIC CGAL::CGAL)
endif()
add_library(cpp-utils::without-mpi ALIAS cpp-utils-without-mpi)
install(TARGETS ${target} EXCLUDE_FROM_ALL OPTIONAL)
